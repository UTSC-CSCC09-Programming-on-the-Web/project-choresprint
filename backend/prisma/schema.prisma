// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  name         String?
  avatarUrl    String?
  provider     String? // e.g. "google"
  providerId   String? // external OAuth ID
  refreshToken String?
  stripeCustomerId String? // Stripe customer ID for billing
  subscriptionStatus String?

  // User belongs to a house
  house          House?       @relation("HouseMembers", fields: [houseId], references: [id])
  houseId        Int?
  points         Int?         @default(0)
  weeklyDigest   Boolean      @default(true)

  // User can be a creator of a house
  createdHouse   House?       @relation("HouseCreator")
  
  // User can be assigned chores
  chores         Chore[]      @relation("ChoreAssignee")
  
  // User can create invitations
  createdInvitations Invitation[] @relation("InvitationCreator")
  
  createdAt      DateTime     @default(now())
}

model House {
  id            Int          @id @default(autoincrement())
  name          String
  
  // House has a creator
  createdBy     User         @relation("HouseCreator", fields: [createdById], references: [id])
  createdById   Int          @unique

  // House has members
  members       User[]       @relation("HouseMembers")

  recurrenceIntervalInDays Int     @default(7) // Weekly by default
  lastResetAt              DateTime @default(now())

  chores        Chore[]
  invitations   Invitation[]
  createdAt     DateTime     @default(now())
}

model Chore {
  id                Int       @id @default(autoincrement())
  title             String
  description       String?
  referencePhotoUrl String?
  dueDate           DateTime?
  isCompleted       Boolean   @default(false)

  assignedTo   User? @relation("ChoreAssignee", fields: [assignedToId], references: [id])
  assignedToId Int?

  house   House @relation(fields: [houseId], references: [id])
  houseId Int

  photoUrl      String?   // for uploaded verification photo
  verified      Boolean   @default(false) // AI decision
  attempted     Boolean   @default(false)
  explanation   String?
  points        Int       @default(10)
  createdAt     DateTime  @default(now())
}

model Invitation {
  id          Int       @id @default(autoincrement())
  code        String    @unique // UUID or random token
  house       House     @relation(fields: [houseId], references: [id])
  houseId     Int
  invitedBy   User      @relation("InvitationCreator", fields: [invitedById], references: [id])
  invitedById Int
  used        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  usedAt      DateTime?
}